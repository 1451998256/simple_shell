#include "shell.h"

/**
 * get_environ - returns the string array copy of our environ
 * @info: Structure containing potential arguments. Used to maintain
 *          constant function prototype.
 * Return: The environ string array
 */
char **get_environ(info_t *info)
{
    if (!info->environ || info->env_changed)
    {
        free_string_array(info->environ);
        info->environ = list_to_strings(info->env);
        info->env_changed = false;
    }

    return info->environ;
}

/**
 * _unsetenv - Remove an environment variable
 * @info: Structure containing potential arguments. Used to maintain
 *        constant function prototype.
 * @var: the string env var property
 * Return: 1 on delete, 0 otherwise
 */
int _unsetenv(info_t *info, const char *var)
{
    if (!info->env || !var)
        return 0;

    bool changed = false;
    size_t i = 0;
    list_t *node = info->env;
    while (node)
    {
        if (starts_with(node->str, var) == node->str)
        {
            changed = delete_node_at_index(&info->env, i);
            i = 0;
            node = info->env;
        }
        else
        {
            node = node->next;
            i++;
        }
    }
    info->env_changed = changed;
    return changed;
}

/**
 * _setenv - Initialize a new environment variable,
 *             or modify an existing one
 * @info: Structure containing potential arguments. Used to maintain
 *        constant function prototype.
 * @var: the string env var property
 * @value: the string env var value
 * Return: 0 on success, 1 otherwise
 */
int _setenv(info_t *info, const char *var, const char *value)
{
    if (!var || !value)
        return 1;

    char *buf = malloc(_strlen(var) + _strlen(value) + 2);
    if (!buf)
        return 1;

    _strcpy(buf, var);
    _strcat(buf, "=");
    _strcat(buf, value);

    list_t *node = info->env;
    while (node)
    {
        if (starts_with(node->str, var) == node->str)
        {
            free(node->str);
            node->str = buf;
            info->env_changed = true;
            return 0;
        }
        node = node->next;
    }

    add_node_end(&info->env, buf, 0);
    info->env_changed = true;
    return 0;
}
